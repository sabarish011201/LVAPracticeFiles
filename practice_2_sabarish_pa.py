# -*- coding: utf-8 -*-
"""Practice 2 - Sabarish - PA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13yOIh-OXbi9QzKIPeJ2IkW7SLhfAf1gK
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import f1_score
from sklearn.metrics import recall_score
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

loan = pd.read_csv('//content/sample_data/loan_approval.csv')
loan_df = pd.DataFrame(loan)
print(loan_df.head())

loan_df['Gender'] = np.random.choice(['Male', 'Female'], size=len(loan_df))

#checking null values
loan_df.isnull().sum()

#checking duplicates and dropping duplicates
loan_df.duplicated().sum()

#visualize outliers
sns.boxplot(loan_df['Credit_Score'])
plt.show()

#checking outliers and removing outliers for charges column
q1 = loan_df['Credit_Score'].quantile(0.25)
q3 = loan_df['Credit_Score'].quantile(0.75)
IQR = q3 - q1

l_limit = q1 - (1.5*IQR)
u_limit = q3 + (1.5*IQR)
cleaned_loan_df = loan_df[~((loan_df['Credit_Score'] < l_limit) | (loan_df['Credit_Score'] > u_limit))]
print(cleaned_loan_df)

#encode categorical to numerical
lbl = LabelEncoder()
loan_df = cleaned_loan_df.copy()
loan_df['Gender'] = lbl.fit_transform(loan_df['Gender'])
print(loan_df.head())

#model training and evaluation
X = loan_df[['Age', 'Income', 'Loan_Amount', 'Loan_Term', 'Credit_Score', 'Gender']]
y = loan_df['Approved']

model = DecisionTreeClassifier()
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .3)

model = model.fit(X_train, y_train)
pred = model.predict(X_test)
accuracy = accuracy_score(y_test, pred)
print('Decision Tree Accuracy :',accuracy)
f1 = f1_score(y_test, pred)
print('Decision Tree F1-Score :',f1)
precision = precision_score(y_test, pred)
print('Decision Tree Precision :',precision)
recall = recall_score(y_test, pred)
print('Decision Tree Recall_score :',recall)
cm = confusion_matrix(y_test, pred)
print('Decision Tree Confusion Matrix : \n',cm)
print(X_test)

#checking our model prediction
model_pred = pd.DataFrame({
    'Age' : X_test['Age'],
    'Loan_Amount' : X_test['Loan_Amount'],
    'Credit Score' : X_test['Credit_Score'],
    'Actual_Approved' : y_test,
    'Pred_Approved' : pred
})
print(model_pred)