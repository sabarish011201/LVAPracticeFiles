# -*- coding: utf-8 -*-
"""Python_Practice_4_Pandas

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_-Y2IZpeo9QilRmFUGMcO-pBU4KHsSX5
"""

import pandas as pd
import numpy as np

#1
weather_dict = {'Thursday':[34, 30, 30, 29, 30],
                'Friday':[30, 29, 31, 29, 30],
                'Saturday':[29, 30, 30, 31, 'NaN'],
                'Sunday':[29, 30, 31, 'NaN', 'NaN']}
df_weather = pd.DataFrame(weather_dict,index=['Day 1','Day 2','Day 3','Day 4','Day 5'],columns=['Thursday','Friday','Saturday','Sunday'])
print(df_weather)

#2
s1 = pd.Series(['Denim Jean', 't-shirt', 'Long Coat', 'Gym shirt', 'Sweater', 'Hoodie'])
s2 = pd.Series([3000, 1600, 1587, 2670, 3000, 2450])
cloth = pd.DataFrame({'Clothing': s1, 'Price':s2})
cloth.index+=1
cloth['Discounted_Price'] = cloth['Price'] * 0.85
print(cloth)

#3
data = {'A':[13.2, 14.2, 13.5, 13.6, 14.3], 'B':{'C':[10.2,10.4,10.6,10.7,10.8],'D':[6.5,5.4,6.7,6.6,6.5]}}
sensors = pd.DataFrame({'pH-Sensor':data['A'],'Ion':data['B']['C'],'Connectivity':data['B']['D']})
print(sensors)

#4
data = [{'CampaignID': 'C1', 'StartDate': '2023-01-01', 'EndDate': '2023-01-15', 'Budget': 1000, 'Clicks': 150},
         {'CampaignID': 'C2', 'StartDate': '2023-01-02', 'EndDate': '2023-01-16', 'Budget': 2500, 'Clicks': 100},
         {'CampaignID': 'C3', 'StartDate': '2023-01-03', 'EndDate': '2023-01-17', 'Budget': 500, 'Clicks': 210},
         {'CampaignID': 'C4', 'StartDate': '2023-01-04', 'EndDate': '2023-01-18', 'Budget': 5000, 'Clicks': 15},
         {'CampaignID': 'C5', 'StartDate': '2023-01-05', 'EndDate': '2023-01-19', 'Budget': 10000, 'Clicks': 115}]
campaign = pd.DataFrame(data)
campaign.set_index('CampaignID', inplace=True)
print(campaign)

#5
sales_data = { 2021: { 'ProductA': 120000, 'ProductB': 85000, 'ProductC': 94000 },
              2022: { 'ProductA': 130000, 'ProductB': 90000, 'ProductC': 110000 } }
df = pd.DataFrame({'2021': sales_data[2021], '2022': sales_data[2022]})
print(df)

#6
data = {
    'Date': ['2022-12-01', '2022-12-02', '2022-12-03', '2022-12-04', '2022-12-05',
             '2023-12-01', '2023-12-02', '2023-12-03', '2023-12-04', '2023-12-05'],
    'TotalSales': [8498, 5977, 3298, 7912, 7866, 9000, 8500, 7600, 6800, 7200],
    'NumberOfTransactions': [52, 90, 70, 93, 73, 80, 85, 75, 65, 70]
}
data_sales = pd.DataFrame(data)
data_sales['Date']= pd.to_datetime(data_sales['Date'])
data_sales.set_index('Date', inplace=True)
december_sales = data_sales[data_sales.index.month == 12]
print(december_sales)

data = { 'EmployeeID': [36, 40, 41, 43, 46],
        'Name': ['Employee_36', 'Employee_40', 'Employee_41', 'Employee_43', 'Employee_46'],
         'Department': ['Sales', 'HR', 'Sales', 'Marketing', 'Sales'],
         'JoiningDate': ['2022-05-01', '2020-11-15', '2021-02-20', '2019-08-10', '2021-06-30'],
         'PerformanceScore': [4, 1, 1, 8, 5] }
df = pd.DataFrame(data)
df['JoiningDate'] = pd.to_datetime(df['JoiningDate'])
filtered = df[(df['JoiningDate']>'01-01-2021') & (df['Department']=="Sales")]
selected = filtered[['Name','PerformanceScore']]
print(selected)

#7
data = {
    'Year': [2019, 2020, 2021, 2022],
    'Quarter': [2, 2, 2, 2],
    'Revenue': [27184, 37790, 48251, 44124],
    'Expenses': [16599, 25456, 33223, 11895]
}
sales = pd.DataFrame(data)
filtered = sales['Year']>=2019
columns = ['Year','Revenue','Expenses']
res = sales.loc[filtered,columns]
print(res)

#8
data = {'Year': [2019,2020,2021,2022,2019,2020],
        'Quarter': [2,2,2,2,3,2],
        'Revenue': [27184,37790,48251,44124,45342,21333],
        'Expenses': [16599,25456,33223,11895,34432,12334]}
sales = pd.DataFrame(data)
filtered = sales['Quarter']==2
columns = ['Year','Revenue','Expenses']
res = sales.loc[filtered,columns]
print(res)

#9 (Practice this)
import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta

# Generate random data
np.random.seed(0)
dates = [datetime(2024, np.random.randint(1, 7), np.random.randint(1, 28)) for _ in range(1000)]
product_ids = ['Product_A', 'Product_B']
product_id = [random.choice(product_ids) for _ in range(1000)]
sales = np.random.randint(100, 1000, size=1000)

# Create DataFrame
sales_data = pd.DataFrame({'Date': dates, 'ProductID': product_id, 'Sales': sales})
print(sales_data)
# Filter data for the last six months
end_date = max(sales_data['Date'])
start_date = end_date - timedelta(days=180)
filtered_data = sales_data[(sales_data['Date'] >= start_date) & (sales_data['Date'] <= end_date)]

# Calculate total sales for each product
total_sales = filtered_data.groupby('ProductID')['Sales'].sum()

# Calculate percentage change in sales
percentage_change = (total_sales['Product_A'] - total_sales['Product_B']) / total_sales['Product_B'] * 100

print(f'Total sales for Product_A: {total_sales["Product_A"]}')
print(f'Total sales for Product_B: {total_sales["Product_B"]}')
print(f'Percentage change in sales: {percentage_change:.2f}%')

#10
customer_data = {
    'CustomerID': [101, 102, 103, 104, 105],
    'TotalSpent': [800, 1200, 600, 1500, 900],
    'LastPurchaseDate': pd.date_range('2022-01-01', periods=5),
    'Country': ['USA', 'Canada', 'USA', 'Canada', 'USA']
}

sales = pd.DataFrame(customer_data)
filtered = (sales['TotalSpent'] > 1000) & (sales['LastPurchaseDate'] > '2022-01-02')
res = sales.loc[filtered]
print(res)

#11
inventory_data = { 'ProductID': ['P1', 'P2', 'P3', 'P4', 'P5', 'P6', 'P7'],
                  'UnitsInStock': [50, 75, 20, 40, 60, 30, 80],
                   'Price': [55, 45, 60, 70, 30, 85, 65],
                   'SalesCount': [120, 95, 150, 200, 80, 130, 160] }
sales = pd.DataFrame(inventory_data)
filtered = (sales['SalesCount']>100) & (sales['Price']>50)
res = sales.loc[filtered]
print(res)

#12
employee_data = { 'EmployeeID': [101, 102, 103, 104, 105],
                 'Name': ['John', 'Emily', 'Michael', 'Sarah', 'David'],
                  'Department': ['HR', 'Finance', 'Marketing', 'IT', 'Sales'],
                  'PerformanceRating': [4, 5, 3, 4, 5],
                  'Salary': [95000, 105000, 80000, 110000, 90000] }
data = pd.DataFrame(employee_data)
filtered = (data['PerformanceRating'] == 5) & (data['Salary']>100000)
bonus = data.loc[filtered].copy() #there was a warning if not using copy
bonus['Bonus'] = bonus['Salary']* 1.1
print(bonus)

employee_data = { 'EmployeeID': [101, 102, 103, 104, 105],
                 'Name': ['John', 'Emily', 'Michael', 'Sarah', 'David'],
                  'Department': ['HR', 'Finance', 'Marketing', 'IT', 'Sales'],
                  'PerformanceRating': [4, 5, 3, 4, 5],
                  'Salary': [95000, 105000, 80000, 110000, 90000] }
data = pd.DataFrame(employee_data)
data['Bonus'] = 0
filtered = (data['PerformanceRating'] == 5) & (data['Salary']>100000)
data.loc[filtered,'Bonus'] = data.loc[filtered,'Salary'] * 0.1
print(data)

#13
data = pd.read_csv('/content/sample_data/sales_data.csv')
data['Date'] = pd.to_datetime(data['Date'])
filtered = (data['Date'] >= '2023-12-01') & (data['Date'] <= '2023-12-31')
data.loc[filtered,'T_Price'] = data.loc[filtered,'Quantity'] * data.loc[filtered,'Price']
res = data.groupby('Product')['T_Price'].sum().reset_index().rename(columns={'T_Price': 'Total_Price'})
print(res)

#14
data = pd.read_csv('/content/sample_data/workout_logs.csv')
res = data.groupby(['Activity','MemberID'])['TotalCaloriesBurned'].sum().reset_index().rename(columns={'TotalCaloriesBurned':'CaloriesBurnt'})
print(res)

#15
medical = { 'PatientID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
           'Age': [35, 45, 28, 50, 60, 42, 55, 30, 38, 65],
            'Gender': ['Male', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male'],
            'VisitDate': ['2023-01-05', '2023-01-06', '2023-01-07', '2023-01-08', '2023-01-09', '2023-01-10', '2023-01-11', '2023-01-12', '2023-01-13', '2023-01-14'],
            'Department': ['Cardiology', 'Neurology', 'Orthopedics', 'Pediatrics', 'Gynecology', 'Dermatology', 'Ophthalmology', 'ENT (Otorhinolaryngology)', 'Urology', 'Psychiatry'],
            'DoctorID': [101, 102, 103, 104, 105, 106, 107, 108, 109, 110],
            'TreatmentCost': [200, 300, 250, 150, 400, 180, 350, 280, 320, 400],
            'DurationOfVisit': [30, 45, 35, 20, 60, 25, 40, 35, 50, 55] }

meddf = pd.DataFrame(medical)
res = meddf.groupby('Department')['TreatmentCost'].agg(['sum','mean'])
res = res.rename(columns={'sum': 'Total_Cost', 'mean': 'Average_Cost'})
print(res)

#16
res_1 = meddf.groupby('DoctorID').agg({'TreatmentCost':['mean'],
                                       'DurationOfVisit': ['sum'],
                                       'Age':['mean'],
                                       'PatientID': 'nunique'})
print(res_1)

#17
avg_age = meddf['Age'].mean()
print(f'Average Patient Age : {avg_age}')
print('\n')
count_dept = meddf.groupby(['Gender','Department'])['Gender'].count().reset_index(name='Count')
print(count_dept)
print('\n')

#18
data = {
    'StoreID': [1, 1, 2, 2, 3, 4, 5, 6],
    'Product': ['Phones', 'Headphones', 'Smartwatches', 'iPad', 'Headphones', 'Smartwatches', 'iPad', 'Phones'],
    'Month': ['January', 'January', 'February', 'February', 'March', 'March', 'April', 'April'],
    'SalesAmount': [100000, 40000, 60000, 400000, 30000, 40000, 600000, 500000]
}
sales = pd.DataFrame(data)
res = sales.groupby(['Month','Product'])['SalesAmount'].sum().reset_index(name='TotalSales')
print(res)

#20
customer_details_data = {
    'CustomerID': [1, 2, 3],
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [30, 45, 28],
    'City': ['New York', 'Los Angeles', 'Chicago'],
    'PreferredContactMethod': ['Email', 'Phone', 'Email']
}
customer_details = pd.DataFrame(customer_details_data)


purchase_history_data = {
    'CustomerID': [1, 1, 2, 3],
    'ProductID': [101, 102, 101, 103],
    'PurchaseDate': ['2023-01-10', '2023-01-15', '2023-01-20', '2023-01-25'],
    'Amount': [150, 200, 300, 100],
    'PurchaseChannel': ['Email', 'Phone', 'Phone', 'Email']
}
purchase_history = pd.DataFrame(purchase_history_data)


merged_data = pd.merge(customer_details, purchase_history, on='CustomerID', how='inner')

merged_data['ContactChannelAlignment'] = merged_data['PreferredContactMethod'] == merged_data['PurchaseChannel']

print(merged_data)