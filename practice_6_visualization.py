# -*- coding: utf-8 -*-
"""Practice_6_Visualization

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YeVc-yMvLcN07B6WGf2-1Ov_arhAOnJN
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#1
data = {'city1_temps' : [20, 22, 25, 28, 30, 32, 34, 33, 30, 27, 24, 22],
'city2_temps': [18, 20, 23, 26, 28, 30, 32, 31, 28, 25, 22, 20],
'city3_temps': [22, 25, 28, 30, 32, 34, 35, 35, 33, 30, 26, 23],
'months': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']}

temp = pd.DataFrame(data)
avg_city1 = temp['city1_temps'].mean()
avg_city2 = temp['city2_temps'].mean()
avg_city3 = temp['city3_temps'].mean()
def avg_temp():
  name = ['city1','city2','city3']
  avg_temps = [avg_city1,avg_city2,avg_city3]
  plt.bar(name,avg_temps, color='skyblue',edgecolor='black')
  plt.xlabel('Cities')
  plt.ylabel('Avg_Temp')
  plt.show()
avg_temp()

#1
def avg_temps():
  plt.figure(figsize= (12,6))
  plt.plot(temp['months'],temp['city1_temps'],marker='o')
  plt.plot(temp['months'],temp['city2_temps'],marker='o')
  plt.plot(temp['months'],temp['city3_temps'],marker='o')
  legend = ['city1','city2','city3']
  plt.grid(True)
  plt.legend(legend,title='City Name', loc='upper left')
  plt.show()
avg_temps()

#2
data = {
    'Age': [25, 30, 35, 40, 45],
    'Income': [50000, 60000, 70000, 80000, 90000],
    'Purchase Behavior': ['High', 'Low', 'Medium', 'High', 'Low']
}
df = pd.DataFrame(data)
sns.scatterplot(data=df, x='Age', y='Income', hue='Purchase Behavior', s=200)
plt.title('Customer Segments based on Age, Income, and Purchase Behavior')
plt.xlabel('Age')
plt.ylabel('Income')
plt.legend(title='Purchase Behavior')
plt.grid(True)
plt.show()

#3
data = {'Date': ['2024-01-01', '2024-01-02', '2024-01-03'],
        'Company A': [100, 105, 110],
        'Company B': [150, 145, 140],
        'Company C': [200, 195, 190]}
df = pd.DataFrame(data)
df.set_index('Date', inplace=True)
print(df)
sns.heatmap(df)
plt.show()

#4
data = {'Walking': 25, 'Cycling': 15, 'Public Transportation': 30, 'Driving': 20, 'Carpooling': 10}
df = pd.DataFrame(data, index=[0])
df = df.T.reset_index()
df.columns = ['Mode of Transport', 'Frequency']
plt.pie(df['Frequency'], labels = df['Mode of Transport'], autopct='%0.1f%%')
plt.show()

#6
dates = pd.date_range(start='2022-01-01', end='2022-12-31', freq='MS')
month_names = dates.strftime('%B')
np.random.seed()
cityA_temp = np.random.normal(loc=20, scale=5, size=12)
cityB_temp = np.random.normal(loc=20, scale=5, size=12)
cityC_temp = np.random.normal(loc=20, scale=5, size=12)
df = pd.DataFrame({'Month': month_names, 'City A': cityA_temp, 'City B': cityB_temp, 'City C': cityC_temp,})
df.set_index('Month', inplace=True)
sns.heatmap(df, annot=True, fmt='f')
plt.show()

#7
import random
np.random.seed()
age = np.random.normal(loc=20, scale=70, size = 5)
income = np.random.normal(loc=50000, scale=10000, size = 5)
prf_behavior = np.random.randint(0,3, size = 5)

data = {'Age': age, 'Income': income, 'Performance Behavior':prf_behavior}
df = pd.DataFrame(data)
sns.pairplot(df, hue = 'Performance Behavior', palette='Set2')
plt.show()

#7
import random
np.random.seed(0)

n_samples = 100
age = np.random.randint(20, 70, size=n_samples)
income = np.random.randint(40000, 100000, size=n_samples)
purchase_behavior = np.random.randint(0, 3, size=n_samples)

data = {'Age': age, 'Income': income, 'Purchase Behavior': purchase_behavior}
df = pd.DataFrame(data)

sns.pairplot(df, hue='Purchase Behavior', palette='Set1')
plt.show()

#8
np.random.seed()
dates = pd.date_range(start='2022-01-01', periods=5, freq='D')
stock_a_prices = np.random.normal(loc=100, scale=10, size=5)
stock_b_prices = np.random.normal(loc=120, scale=15, size=5)
stock_c_prices = np.random.normal(loc=90, scale=8, size=5)
data = {
    'Date': dates,
    'Stock A': stock_a_prices,
    'Stock B': stock_b_prices,
    'Stock C': stock_c_prices
}
df = pd.DataFrame(data)
df.set_index('Date', inplace=True)
print(df)
sns.heatmap(df)
df.plot()
plt.ylabel('Price')
plt.xlabel('Date')
plt.grid(True)
plt.show()

#9
data = [["18-25",5000],["26-35",7500],["36-45",6000],["46-55",8500],[">56",7000]]
columns = ['Age Group', 'Total Purchase']
df = pd.DataFrame(data, columns = columns)
plt.bar(df['Age Group'],df['Total Purchase'], color = 'skyblue', edgecolor='black')
plt.xlabel('Age Group')
plt.ylabel('Total Sales')
plt.grid(axis='y')
plt.show()

#10
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
city1_temps = [20, 22, 25, 28, 30, 32, 34, 33, 30, 27, 24, 22]
city2_temps = [18, 20, 23, 26, 28, 30, 32, 31, 28, 25, 22, 20]
data = {'Month': months, 'CityA': city1_temps, 'CityB': city2_temps}
df = pd.DataFrame(data)
plt.plot(df['Month'], df['CityA'], label='CityA')
plt.plot(df['Month'], df['CityB'], label='CityB')
plt.xticks(df['Month'])
plt.legend()
plt.grid(True)
plt.show()

#11
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
product1_sales = [1000, 1200, 1100, 900, 950, 1050, 1150, 1300, 1400, 1350, 1200, 1100]
product2_sales = [800, 850, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800]
product3_sales = [600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700]
data = {'Month': months, 'Product1': product1_sales, 'Product2': product2_sales,'Product3': product3_sales}
df = pd.DataFrame(data)
plt.plot(df['Month'], df['Product1'], label='Product1')
plt.plot(df['Month'], df['Product2'], label='Product2')
plt.plot(df['Month'], df['Product3'], label='Product3')
plt.xticks(df['Month'])
plt.legend()
plt.grid(True)
plt.show()

#12
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
category1_sales = [10000, 12000, 11000, 9000, 9500, 10500, 11500, 13000, 14000, 13500, 12000, 11000]
category2_sales = [8000, 8500, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000]
category3_sales = [6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000]
data = {'Month': months, 'Category1': category1_sales, 'Category2': category2_sales,'Category3': category3_sales}
df = pd.DataFrame(data)
plt.plot(df['Month'], df['Category1'], label='Category1')
plt.plot(df['Month'], df['Category2'], label='Category2')
plt.plot(df['Month'], df['Category3'], label='Category3')
plt.xticks(df['Month'])
plt.legend()
plt.grid(True)
plt.show()

#13
quarters = ['Q1 2020', 'Q2 2020', 'Q3 2020', 'Q4 2020', 'Q1 2021', 'Q2 2021', 'Q3 2021', 'Q4 2021']
revenue = [500000, 550000, 600000, 650000, 700000, 750000, 800000, 850000]
profit = [100000, 120000, 130000, 150000, 160000, 170000, 180000, 190000]

plt.figure(figsize=(12, 6))
plt.plot(quarters, revenue, marker='o', label='Revenue')
plt.plot(quarters, profit, marker='x', label='Profit')
plt.xlabel('Quarter')
plt.ylabel('Amount ($)')
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.show()

#14
dept1_ratings = [3.5, 4.0, 3.8, 4.2, 3.9, 4.1, 4.3, 4.0, 3.7, 3.9]
dept2_ratings = [4.2, 4.1, 3.9, 4.3, 4.0, 3.8, 4.2, 3.7, 4.1, 4.0]
dept3_ratings = [3.9, 3.7, 4.0, 4.1, 3.8, 4.2, 4.0, 4.3, 3.8, 4.1]

data = {'Dept1':dept1_ratings, 'Dept2':dept2_ratings, 'Dept3': dept3_ratings}
df = pd.DataFrame(data)
plt.figure(figsize=(10, 6))
plt.boxplot(df, labels=['Dept 1', 'Dept 2', 'Dept 3'])
plt.title('Employee Performance Ratings by Department')
plt.ylabel('Performance Rating')
plt.grid(True)
plt.show()

#15
np.random.seed(0)
data_normal = np.random.normal(loc=0, scale=1, size=1000)
data_uniform = np.random.uniform(low=0, high=1, size=1000)
data_exponential = np.random.exponential(scale=1, size=1000)

df = pd.DataFrame({
    'Normal': data_normal,
    'Uniform': data_uniform,
    'Exponential': data_exponential
})

plt.figure(figsize=(12, 6))
plt.subplot(3, 1, 1)
sns.histplot(data=df['Normal'], kde=True, color='skyblue')
plt.title('Normal Distribution')

plt.subplot(3, 1, 2)
sns.histplot(data=df['Uniform'], kde=True, color='salmon')
plt.title('Uniform Distribution')

plt.subplot(3, 1, 3)
sns.histplot(data=df['Exponential'], kde=True, color='olive')
plt.title('Exponential Distribution')

plt.tight_layout()
plt.show()

#16
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

np.random.seed(0)

dates = pd.date_range(start='2022-02-01', periods=30, freq='D')
traffic = np.random.randint(100, 1000, size=30)

df = pd.DataFrame({'Date': dates, 'Traffic': traffic})

plt.figure(figsize=(12, 6))
plt.fill_between(df['Date'], df['Traffic'], color='skyblue', alpha=0.4)
plt.plot(df['Date'], df['Traffic'], color='Slateblue', alpha=0.6)
plt.title('Website Traffic Over the Past Month')
plt.xlabel('Date')
plt.ylabel('Traffic')
plt.grid(True)
plt.tight_layout()
plt.show()

#17
np.random.seed()
age = np.random.randint(18,55,size=10)
income = np.random.randint(10000,100000,size=10)
data = {'Age': age, 'Income': income}
df = pd.DataFrame(data)
sns.scatterplot(data=df, x='Age', y='Income', s=50)
plt.grid(True)
plt.show()

#18
from mpl_toolkits.mplot3d import Axes3D

np.random.seed(0)
age = np.random.randint(18,60,size=50)
weight = np.random.randint(40,100,size=50)
height = np.random.randint(140,190,size=50)

df = pd.DataFrame({'Age': age, 'Weight': weight, 'Height': height})

fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df['Weight'], df['Age'], df['Height'], c='black', s=60)
ax.set_title('3D Scatter Plot')
ax.set_xlabel('Weight')
ax.set_ylabel('Age')
ax.set_zlabel('Height')
plt.show()

#19
np.random.seed()
dates = pd.date_range(start='2023-01-01', periods = 30, freq='D')
prices = np.random.randint(1000,10000,size=30)
data = {'Date':dates, 'Stock_Price':prices}
df = pd.DataFrame(data)
plt.figure(figsize=(20,10))
sns.lineplot(data=df, x='Date', y='Stock_Price', color='red', linewidth=2, marker='o')
plt.grid(True)
plt.title('Stock Prices over last month')
plt.show()

#20
timestamps = ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05']
temperatures = [20, 22, 25, 23, 21]
data = {'Date': timestamps, 'Temperature': temperatures}
df = pd.DataFrame(data)
sns.lineplot(data=df, x='Date', y='Temperature', marker='o')
plt.grid(True)
plt.show()

#21
exam_scores = [65, 70, 75, 80, 85, 90, 95, 100, 75, 80, 85, 90, 95]

plt.figure(figsize=(8, 6))
plt.hist(exam_scores, bins=5, color='skyblue', edgecolor='black')
plt.title('Exam Scores Histogram')
plt.xlabel('Exam Scores')
plt.ylabel('Frequency')
plt.grid(axis='y')
plt.show()

#22
fruit_counts = {'Apples': 25, 'Oranges': 30, 'Bananas': 20}
df = pd.DataFrame(fruit_counts,index=[0])
df1 = df.T.reset_index()
df1.columns = ['Fruit','Quantity']
plt.bar(df1['Fruit'],df1['Quantity'], color='skyblue', edgecolor='black')
plt.grid(axis='y', alpha=.2)
plt.show()

#23
np.random.seed()
dept1 = np.random.randint(1,5,size=10)
dept2 = np.random.randint(1,5,size=10)
dept3 = np.random.randint(1,5,size=10)
data = {'Dept1':dept1, 'Dept2':dept2,'Dept3':dept3 }
df = pd.DataFrame(data)

plt.boxplot(df, labels=['Dept1','Dept2','Dept3'])
plt.grid(True)
plt.xlabel('Dept Name')
plt.ylabel('Performance Rating')
plt.show()

#24
np.random.seed()
weight = np.random.randint(40,100,size=50)
height = np.random.randint(140,190,size=50)
df = pd.DataFrame({'Weight': weight, 'Height': height})
plt.scatter(df['Weight'],df['Height'])
plt.grid(True)
plt.xlabel('Weight in kg')
plt.ylabel('Height in cm')
plt.show()

#25 Practice this
import numpy as np
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE

# Generate random high-dimensional data
np.random.seed(0)
X_high_dim = np.random.rand(100, 20)

# Use t-SNE to reduce the dimensions to 2D
tsne = TSNE(n_components=2, random_state=0)
X_2d = tsne.fit_transform(X_high_dim)

# Plot the 2D representation
plt.figure(figsize=(8, 6))
plt.scatter(X_2d[:, 0], X_2d[:, 1])
plt.title('t-SNE 2D Visualization of High-Dimensional Data')
plt.xlabel('Dimension 1')
plt.ylabel('Dimension 2')
plt.show()

#26
from mpl_toolkits.mplot3d import Axes3D

np.random.seed(0)
age = np.random.randint(18,60,size=50)
weight = np.random.randint(40,100,size=50)
height = np.random.randint(140,190,size=50)

df = pd.DataFrame({'Age': age, 'Weight': weight, 'Height': height})

fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df['Weight'], df['Age'], df['Height'], c='black', s=60)
ax.set_title('3D Scatter Plot')
ax.set_xlabel('Weight')
ax.set_ylabel('Age')
ax.set_zlabel('Height')
plt.show()

#27
data = {'Month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar'],
'Product Category': ['A', 'B', 'A', 'B', 'A', 'B'],
'Sales': [100, 150, 120, 180, 130, 160]}
df = pd.DataFrame(data)
group_data = df.groupby(['Month','Product Category'])['Sales'].sum().unstack()
group_data.plot(kind='bar')
plt.show()

#28 Practice this
import matplotlib.pyplot as plt
import numpy as np

# Generate sample data
np.random.seed(0)
x = np.linspace(0, 10, 20)
y1 = 2 * x + np.random.normal(0, 1, size=20)
y2 = 3 * x + np.random.normal(0, 1, size=20)

# Calculate mean values
mean_x = np.mean(x)
mean_y1 = np.mean(y1)
mean_y2 = np.mean(y2)

# Create the plot
plt.figure(figsize=(10, 6))
plt.scatter(x, y1, color='blue', label='Variable 1')
plt.scatter(x, y2, color='red', label='Variable 2')
plt.plot([mean_x, mean_x], [mean_y1, mean_y2], color='green', linestyle='-', linewidth=2, label='Mean Line')
plt.title('Custom Visualization of Two Variables')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.grid(True)
plt.show()

#29
import folium

# Create a map centered at a specific location
map_center = [37.7749, -122.4194]
mymap = folium.Map(location=map_center, zoom_start=5)

# Sample data
locations = [
    {'location': [37.7749, -122.4194], 'area': 'San Francisco'},
    {'location': [34.0522, -118.2437], 'area': 'Los Angeles'},
    {'location': [40.7128, -74.0060], 'area': 'New York'}
]

# Add markers to the map
for loc in locations:
    folium.Marker(location=loc['location'], popup=loc['area']).add_to(mymap)

# Display the map
mymap

#30
np.random.seed(0)
sample1 = np.random.normal(loc=0, scale=1, size=100)
sample2 = np.random.normal(loc=1, scale=2, size=100)
data = pd.DataFrame({'Sample 1': sample1, 'Sample 2': sample2})

sns.jointplot(data=data, x='Sample 1', y='Sample 2', kind='scatter')

#31
np.random.seed()
dates = pd.date_range(start='2023-01-01', periods = 30, freq='D')
prices = np.random.randint(1000,10000,size=30)
data = {'Date':dates, 'Stock_Price':prices}
df = pd.DataFrame(data)
plt.figure(figsize=(20,10))
sns.lineplot(data=df, x='Date', y='Stock_Price', color='red', linewidth=2, marker='o', linestyle='dashed')
plt.grid(True)
plt.title('Stock Prices over last month')
plt.show()

#32
np.random.seed(0)
data = {
    'Group': np.random.choice(['A', 'B'], size=100),
    'Score': np.random.normal(loc=70, scale=10, size=100)
}
df = pd.DataFrame(data)
df.boxplot(by='Group', column='Score')
plt.xlabel('Group')
plt.ylabel('Score')
plt.show()

#33
data = {
    'Age': np.random.randint(18,60,25),
    'Sex':np.random.choice(['Male','Female'], size=25)
}
df = pd.DataFrame(data)
df.boxplot(by='Sex', column='Age')
plt.ylabel('Age')
plt.show()

#34
data = {
    'Income': np.random.randint(10000,60000,25),
    'Edu_Level':np.random.choice(['School','UG','PG'], size=25)
}
df = pd.DataFrame(data)
df.boxplot(by='Edu_Level', column='Income')
plt.ylabel('Income')
plt.show()